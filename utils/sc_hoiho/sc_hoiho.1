.\"
.\" sc_hoiho.1
.\"
.\" Author: Matthew Luckie <mjl@luckie.org.nz>
.\"
.\" Copyright (c) 2019-2020 Matthew Luckie
.\"               All rights reserved
.\"
.\" $Id: sc_hoiho.1,v 1.9 2021/12/12 00:05:06 mjl Exp $
.\"
.Dd September 21, 2020
.Dt SC_HOIHO 1
.Os
.Sh NAME
.Nm sc_hoiho
.Nd Holistic Orthography of Internet Hostname Observations
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl 6
.Op Fl d Ar dump
.Op Fl D Ar domain
.Op Fl f Ar rtt-fudge
.Op Fl g Ar dictionary
.Op Fl l Ar light-speed
.Op Fl O Ar option
.Op Fl r Ar regex
.Op Fl R Ar rtt-file
.Op Fl s Ar stopid
.Op Fl S Ar siblings
.Op Fl t Ar threadc
public-suffix-list.dat routers.txt
.Ek
.\""""""""""""
.Sh DESCRIPTION
The
.Nm
utility automatically learns regular expressions that extract
router names, geolocation hints, autonomous system numbers (ASNs),
and autonomous system names (AS names) from hostnames.
A regular expression that extracts a router name from a router
hostname can be used to infer which interfaces belong to the same
router (are aliases).
A regular expression that extracts an ASN or AS name from a router
hostname can be used to infer which AS operates the router.
A regular expression that extracts geolocation hints from a router
hostname can be used to infer the approximate location of the router.
.Pp
To learn these regular expressions,
.Nm
uses a set of training routers whose interfaces were inferred to be
aliases, optionally annotated with their operating ASN.
The core of the technique is described in the paper "Learning to
Extract Router Names from Hostnames" published in the ACM Internet
Measurement Conference (IMC) 2019.
The technique that learns to extract ASNs is described in the paper
"Learning to Extract and Use ASNs in Hostnames" published in IMC 2020.
The technique that learns to extract geolocation hints is described
in the paper "Learning to Extract Geographic Hints from Internet Router
Hostnames" published in the ACM Conference on emerging Networking
EXperiments and Technologies (CoNEXT) 2021.
The technique that learns to extract AS names is described in the paper
"Learning Regexes to Extract Network Names from Hostnames" published
in the Asian Internet Engineering Conference (AINTEC) 2021.
.Pp
The supported options to
.Nm
are as follows:
.Bl -tag -width Ds
.It Fl 6
specifies that the input training set contains IPv6 addresses, and not
IPv4 addresses.
.It Fl d Ar dump
specifies the dump ID to use to analyze the collected data.
Currently, ID values 1 (working-set), 2 (routers), 3 (best-regex),
4 (interfaces) are valid, which (1) dump the working set of regexes for each
suffix, (2) the router-level result of applying the best regexes to the
training data, (3) the best regex per domain, and (4) the interface-level
result of applying the best regexes to the training data,
respectively.
.It Fl D Ar domain
specifies the domain suffix that
.Nm
should operate on.  If no suffix is specified, then
.Nm
operates on all suffixes.
.It Fl f Ar rtt-fudge
specifies a fudge value, in milliseconds, to add to measured RTTs
before evaluating if the RTT between two lat/longs is feasible.
By default, this is 1ms.
.It Fl g Ar dictionary
specifies a filename containing a geolocation or AS name dictionary.
The format of this file is specified below.
.It Fl l Ar light-speed
specifies the distance covered in metres per millisecond, and is used
to evaluate if the RTT between two lat/longs is feasible.
By default, this is 204.190477 metres per millisecond, the speed of
light in fiber optic cable.
.It Fl O Ar option
allows the behavior of
.Nm
to be further tailored.
The current choices for this option are:
.Bl -dash -offset 2n -compact -width 1n
.It
.Sy application:
Show the outcome of applying the regular expressions to the application set.
.It
.Sy debug:
output significant volumes of debugging information.  Debugging
information is only printed when a
.Nm
is using a single thread.
.It
.Sy json:
Output inferences using json format.  This option is applicable on
dump IDs 2 and 3.
.It
.Sy learnalias:
infer regexes to extract router names from hostnames.
.It
.Sy learnasn:
infer regexes to extract AS numbers from hostnames.
.It
.Sy learnasnames:
infer regexes to extract AS names from hostnames.
.It
.Sy learngeo:
infer regexes to extract geolocation hints from hostnames.
.It
.Sy loadonly:
load the training data into memory and then exit.
.It
.Sy noclli:
do not emit geolocation information for CLLI code prefixes.
.It
.Sy noed1:
Do not infer true positives between extracted and inferred ASNs where the
ASNs have an edit distance of one.
.It
.Sy noip:
Do not infer the location of an embedded IP address portion, if any, in
the hostname.
.It
.Sy nojit:
Do not use
.Xr pcre 3
or
.Xr pcre2 3
just in time complication to improve regex performance.
.It
.Sy norefine:
do not do any refinement of regular expressions.
.It
.Sy norefine-tp, refine-tp:
do not, or do, execute the phase that builds literals into components
that extract a string from the hostnames.  This phase is described in
phase 5.2 of the IMC 2019 paper.
.It
.Sy norefine-fne, refine-fne:
do not, or do, execute the phase that embeds literals in a regex component
that separates hostnames from their training routers.  This phase
is described in section 5.3 of the IMC 2019 paper.
.It
.Sy norefine-class, refine-class:
do not, or do, execute the phase that embeds character classes in regular
expressions.  This phase is described in section 5.4 of the IMC 2019 paper.
.It
.Sy norefine-fnu, refine-fnu:
do not, or do, execute the phase that builds additional regexes to use as a
companion regex with another regex that did not cluster all interfaces
on a router.  This phase is described in section 5.5 of the IMC 2019 paper.
.It
.Sy norefine-sets, refine-sets:
do not, or do, execute the phase that builds naming convention sets using the
regexes in the working set.  This phase is described in section 5.6 of
the IMC 2019 paper.
.It
.Sy norefine-ip, refine-ip:
do not, or do, execute the phase that builds regexes to filter hostnames with
IP addresses in them, where the IP address would be part of an
extracted name.  This phase is described in section 5.7 of the IMC 2019 paper.
.It
.Sy norefine-fp, refine-fp:
do not, or do, execute the phase that builds regexes to filter hostnames that,
if matched, would result in false positives according to the training
data.  This phase is described in phase 5.7 of the IMC 2019 paper.
.It
.Sy norefine-merge, refine-merge:
do not, or do, execute the phase that merges regular expressions that
differ by a single simple string.  This phase is described in section
3.3 of the IMC 2020 paper.
.It
.Sy norefine-dict, refine-dict:
do not, or do, execute the phase that refines the geolocation dictionary.
This phase is described in section 5.4 of the CoNEXT 2021 paper.
.It
.Sy nothin:
do not remove any redundant regexes at the end of each phase, as
described in section 4.5 of the IMC 2019 paper.
.It
.Sy nothin-matchc, thin-matchc:
do not, or do, remove any regexes that do not meet the minimum number
of matches to be considered capturing a convention.  The conditions
are described in section 4.5 of the IMC 2019 paper.
.It
.Sy nothin-same, thin-same:
do not, or do, remove redundant regexes that make the same inferences.
.It
.Sy nothin-mask, thin-mask:
do not, or do, remove redundant regexes whose inferences are entirely
contained in another regex, with no additional false positives.
.It
.Sy randindex:
compute the Rand Index metric on the clustering of hostnames by router
name regexes according to the training data.
.It
.Sy show-class:
only show hostnames where
.Nm
made a classification using a regex.
.It
.Sy show-good:
show regexes that
.Nm
classifies as good.
.It
.Sy show-promising:
show regexes that
.Nm
classifies as promising.
.It
.Sy show-poor:
show regexes that
.Nm
classifies as poor.
.It
.Sy split-locode:
identify LOCODEs that appear to be split into lengths of 2
(country-code) and 3 (location code) in hostnames.
.El
.It Fl r Ar regex
specifies the name of a file containing a working set of regexes, or a
naming convention, to apply.
.It Fl R Ar rtt-file
specifies the name of a file containing round trip time (RTT) measurements
from systems with known locations towards routers.
.It Fl s Ar stop-id
specifies the stage number to halt processing.
.It Fl S Ar siblings
specifies the name of a file containing sibling ASes.
Each line in the file contains a list of sibling ASes that belong to the
same organization.
.It Fl t Ar threadc
specifies the number of threads to use in the threadpool.  By default,
.Nm
will determine the number of processors online, and use all of them.
.El
.\""""""""""""
.Sh EXAMPLES
Given a set of routers in a file named routers.txt, and a copy of
public_suffix_list.dat obtained from the Mozilla Foundation's
https://publicsuffix.org/list/ website:
.Pp
.in +.3i
.nf
# node2id: 1
# node2as: 64496
192.0.2.1    esr1-ge-5-0-0.jfk2.example.net
.br
192.0.2.10   esr1-ge-5-0-6.jfk2.example.net
.br
192.0.31.60
.Pp
# node2id: 2
# node2as: 64496
192.0.2.2    esr2-xe-4-0-0.lax.example.net
.br
192.0.2.5    esr2-xe-4-0-1.lax.example.net
.br
192.0.31.8
.Pp
# node2id: 3
# node2as: 64496
192.0.2.6    das1-v3005.akl.example.net
.br
192.0.2.9    das1-v3006.akl.example.net
.br
192.0.2.44   44.2.0.192.example.net
.Pp
# node2id: 4
# node2as: 64496
192.0.2.13   esr1-xe-4-0-0.lax.example.net
.Pp
# node2id: 5
# node2as: 64496
192.0.2.17   esr1-xe-4-0-1.lax.example.net
.Pp
# node2id: 6
# node2as: 64496
192.0.2.21   esr1-xe-4-0-1.lax.example.net
.Pp
# node2id: 7
# node2as: 64500
192.0.2.25   as64500.cust.example.net
.Pp
# node2id: 8
# node2as: 64501
192.0.2.29   as64501.cust.example.net
.Pp
# node2id: 9
# node2as: 64502
192.0.2.33   as64502.cust.example.net
.Pp
# node2id: 10
# node2as: 64503
192.0.2.37   as64503.cust.example.net
.fi
.in -.3i
.Pp
Then the following command will build a base set of regular
expressions that extract router names, as described in section 5.1 of
the IMC 2019 paper, and output the working set of regexes inferred for
each suffix at the end of that phase.
.Pp
sc_hoiho -O learnalias -d working-set -O norefine public_suffix_list.dat routers.txt
.Pp
To obtain the best selected regular expression that extracts router names
for example.net, use:
.Pp
sc_hoiho -O learnalias -d best-regex -D example.net public_suffix_list.dat routers.txt
.Pp
To examine how the best regular expression that extracts router names
applies to the training data for example.net, use:
.Pp
sc_hoiho -O learnalias -d routers -D example.net public_suffix_list.dat routers.txt
.Pp
To examine how the best regular expression that extracts router names
applies to the training data, as well as interfaces in the application
set, use:
.Pp
sc_hoiho -O learnalias -d routers -D example.net -O application
public_suffix_list.dat routers.txt
.Pp
To see the working set of regular expressions that extract router names
built after embedding literals in captures for example.net, use:
.Pp
sc_hoiho -O learnalias -d working-set -D example.net -s 2
public_suffix_list.dat routers.txt
.Pp
To see how a manually-derived regular expression clusters hostnames
according to the extracted router name, use:
.Pp
sc_hoiho -O learnalias -d routers -D example.net
-r "^([a-z]+\\d+)-.+\\.([a-z\\d]+)\\.example\\.net$"
.br
public_suffix_list.dat routers.txt
.Pp
To infer regular expressions that extract ASNs from hostnames, use:
.Pp
sc_hoiho -O learnasn -d best-regex public_suffix_list.dat routers.txt
.Pp
To infer regular expressions that extract geohints from hostnames, and formatting the
output as JSON, use:
.Pp
sc_hoiho -O learngeo -d best-regex -O json -R rtts.txt -g geohints.txt public_suffix_list.dat routers.txt
.Pp
.\""""""""""""
.Sh HINTS
.Nm
can take a long time to run when inferring regular expressions that extract
router names, depending on the training set involved.
One option to breaking up the runtime (but not reducing it) is to
capture the output from one phase, and then use that as input to the
next phase.  For example, to run the first three phases:
.Pp
sc_hoiho -O learnalias -d working-set -s 1 public_suffix_list.dat routers.txt
>phase-1.re
.br
sc_hoiho -O learnalias -d working-set -s 2 -r phase-1.re
public_suffix_list.dat routers.txt >phase-2.re
.br
sc_hoiho -O learnalias -d working-set -s 3 -r phase-2.re
public_suffix_list.dat routers.txt >phase-3.re
.Pp
.\""""""""""""
.Sh NOTES
.Pp
.Nm
follows the format of the hostnames files stored in CAIDA's Internet
Topology Data Kit (ITDK) which stores hostnames in lower-case, and
stores characters that do not form part of the DNS's alphabet
(A-Z, a-z, - and .) as a hexadecimal escaped string.
For example, if a hostname contains an underscore character, such
as foo_bar, then encode the underscore using the hexadecimal dictionary
in
.Xr ascii 7
as follows: foo\\x5fbar.
.Pp
When learning ASN regexes,
.Nm
can take an optional parameter that specifies which ASNs belong
to the same organization (are siblings).  Each line specifies ASNs
that belong to the same organization.  For example, a file with
the following contents:
.Pp
.in +.3i
.nf
64504 64505 64506
.br
64507 64508
.fi
.in -.3i
.Pp
defines the ASNs operated by two organizations: one organization
with ASes 64504, 64505, and 64506, and the other organization
with ASes 64507 and 64508.
.Pp
When learning geohint regexes,
.Nm
requires parameters that specify a geohint dictionary, and RTT
measurements.
For the geohint dictionary, the format of the file is as follows:
.Pp
.in +.3i
.nf
iata code lat lng cc-st "city"
.br
icao code lat lng cc-st "city"
.br
clli code lat lng cc-st "city"
.br
place "city" cc-st lat lng population
.br
locode code lat lng cc-st "city"
.br
facility "city" cc-st lat lng "street" "name"
.br
country iso3166-2 iso3166-3 "name"
.br
state cc-st "name"
.fi
.in -.3i
.Pp
For example:
.Pp
.in +.3i
.nf
iata IAD 38.9445 -77.455803 US-VA "Washington, DC"
.br
icao KIAD 38.9445 -77.455803 US-VA "Washington, DC"
.br
clli washdc 38.89511 -77.03637 US-DC "Washington, D.C."
.br
place "Washington" US-DC 38.89511 -77.03637 601723
.br
locode USIAD 38.94877 -77.4491 US-VA "Dulles Int Apt/Washington"
.br
facility "Washington" US-DC 38.902918 -77.029149 "1275 K Street, NW" "CoreSite - Washington,DC (DC1)"
.br
country us usa "United States"
.br
state US-DC "Washington, D.C."
.fi
.in -.3i
.Pp
For the RTT measurements, the format of each line of the file is as
follows:
.Pp
.in +.3i
.nf
nodeid iata ms
.fi
.in -.3i
.Pp
For example:
.Pp
.in +.3i
.nf
N1 jfk 1
.br
N1 iad 10
.br
N1 yhu 20
.br
N2 sjc 10
.br
N2 san 12
.br
N2 tij 16
.br
N3 akl 2
.br
N3 wlg 11
.br
N3 syd 25
.fi
.in -.3i
.Pp
When learning AS name regexes,
.Nm
can optionally be provided an AS name dictionary.  If an AS name
dictionary is not provided, then
.Nm
will learn an AS name dictionary automatically.
For an AS name dictionary that maps 64504 to foo, 64505 to bar, and
64506 to baz, the format of the file is as follows:
.Pp
.in +.3i
.nf
64504 foo
.br
64505 bar
.br
64506 baz
.fi
.in -.3i
.Sh SEE ALSO
.Xr pcre 3 ,
.Xr pcre2 3 ,
.Xr sc_ally 1 ,
.Xr sc_pinger 1 ,
.Xr sc_radargun 1 ,
.Xr sc_speedtrap 1 ,
.Rs
.%A "M. Luckie"
.%A "B. Huffaker"
.%A "k claffy"
.%T "Learning to Extract Router Names from Hostnames"
.%O "Proc. ACM Internet Measurement Conference (IMC) 2019"
.Re
.Rs
.%A "M. Luckie"
.%A "A. Marder"
.%A "M. Fletcher"
.%A "B. Huffaker"
.%A "k claffy"
.%T "Learning to Extract and Use ASNs in Hostnames"
.%O "Proc. ACM Internet Measurement Conference (IMC) 2020"
.Re
.Rs
.%A "M. Luckie"
.%A "B. Huffaker"
.%A "A. Marder"
.%A "Z. Bischof"
.%A "M. Fletcher"
.%A "k claffy"
.%T "Learning to Extract Geographic Information from Internet Router Hostnames"
.%O "Proc. ACM Conference on emerging Networking EXperiments and Technologies (CoNEXT) 2021"
.Re
.Rs
.%A "M. Luckie"
.%A "A. Marder"
.%A "B. Huffaker"
.%A "k claffy"
.%T "Learning Regexes to Extract Network Names from Hostnames"
.%O "Proc. Asian Internet Engineering Conference (AINTEC) 2021"
.Re
.Rs
.%A "Mozilla Foundation"
.%T "Public Suffix List"
.%O "https://publicsuffix.org/list/"
.Re
.Rs
.%A "Center for Applied Internet Data Analysis (CAIDA)"
.%T "Macroscopic Internet Topology Data Kit (ITDK)"
.%O "https://www.caida.org/data/internet-topology-data-kit/"
.Re
.Rs
.%A "R. Govindan"
.%A "H. Tangmunarunkit"
.%T "Heuristics for Internet Map Discovery"
.%O "Proc. IEEE INFOCOM 2000"
.Re
.Rs
.%A "N. Spring"
.%A "R. Mahajan"
.%A "D. Wetherall"
.%T "Measuring ISP topologies with Rocketfuel"
.%O "Proc. ACM SIGCOMM 2002"
.Re
.Rs
.%A "A. Bender"
.%A "R. Sherwood"
.%A "N. Spring"
.%T "Fixing Ally's growing pains with velocity modeling"
.%O "Proc. ACM/SIGCOMM Internet Measurement Conference 2008"
.Re
.Rs
.%A "K. Keys"
.%A "Y. Hyun"
.%A "M. Luckie"
.%A "k claffy"
.%T "Internet-Scale IPv4 Alias Resolution with MIDAR"
.%O "IEEE/ACM Transactions on Networking 2013"
.Re
.Rs
.%A "M. Luckie"
.%A "R. Beverly"
.%A "W. Brinkmeyer"
.%A "k claffy"
.%T "Speedtrap: Internet-scale IPv6 Alias Resolution"
.%O "Proc. ACM/SIGCOMM Internet Measurement Conference 2013"
.Re
.Rs
.%A "A. Marder"
.%A "M. Luckie"
.%A "A. Dhamdhere"
.%A "B. Huffaker"
.%A "J. Smith"
.%A "k claffy"
.%T "Pushing the Boundaries with bdrmapIT: Mapping Router Ownership at Internet Scale"
.%O "Proc. ACM Internet Measurement Conference 2018"
.Re
.Sh AUTHORS
.Nm
was written by Matthew Luckie.
Marianne Fletcher added support for inferring regexes that extract
ASNs and geohints from hostnames.
