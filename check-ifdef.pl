#!/usr/bin/env perl
#
# process source code looking for #ifdef-related bugs.
#
# $Id: check-ifdef.pl,v 1.2 2024/07/19 06:43:00 mjl Exp $

use strict;
use warnings;

my %defs;

# we use these in scamper at some point, assuming they exist.
# initialise to zero, set to 1 if ever observed in an #ifdef, so that
# we can find stale ifdefs in this file.
$defs{$_} = 0 foreach (
    "AF_LINK", "AF_UNIX",
    "ARPHRD_IEEE1394", "ARPHRD_SIT", "ARPHRD_VOID",
    "DLT_APPLE_IP_OVER_IEEE1394",
    "BIOCSETFNR", "DIOCGETSTATUSNV", "SIOCGSTAMP",
    "ICMP6_FILTER", "ICMP_FILTER",
    "IPV6_DONTFRAG", "IPV6_HOPLIMIT",
    "IPV6_PKTINFO", "IPV6_RECVERR", "IPV6_RECVHOPLIMIT",
    "IPV6_RECVPKTINFO", "IPV6_RECVTCLASS", "IPV6_TCLASS", "IPV6_V6ONLY",
    "IP_PKTINFO", "IP_RECVERR", "IP_RECVOPTS", "IP_RECVPKTINFO",
    "MJLHEAP_DEBUG", "MJLLIST_DEBUG", "MJLSPLAYTREE_DEBUG",
    "O_NONBLOCK", "PCRE_STUDY_JIT_COMPILE", "RTF_LLINFO",
    "SIGCHLD", "SIGPIPE",
    "SOURCES_DEBUG",
    "SO_TIMESTAMP",
    "SSL_CTRL_SET_TLSEXT_HOSTNAME",
    "_MSC_VER",
    "IOV_MAX", "_SC_IOV_MAX", "_SC_NPROCESSORS_ONLN",
    "s6_addr32",
    "BUILDING_SCAMPER", "BUILDING_LIBSCAMPERFILE",
    "DMALLOC",
    "HAVE_CONFIG_H", "HAVE_PCRE2", "HAVE_WINGETOPT_H",
    "_IPFW2_H", "_IP_FW_H",
    "__linux__", "__sun__", "__ANDROID__", "__APPLE__", "_WIN32",
    "__FreeBSD__", "__NetBSD__", "__OpenBSD__", "__DragonFly__",
    "FUZZ_CHUNKED", "FUZZ_DEALIAS", "FUZZ_HDRS", "FUZZ_HOST",
    "FUZZ_HTTP", "FUZZ_NEIGHBOURDISC", "FUZZ_PING", "FUZZ_SNIFF",
    "FUZZ_STING", "FUZZ_TBIT", "FUZZ_TRACE", "FUZZ_TRACELB",
    "FUZZ_UDPPROBE", "TEST_DL_PARSE_ARP", "TEST_DL_PARSE_IP",
    "TEST_HOST_RR_LIST",
    );

# get other #defines out of config.h generated by autoconf
open(HEADER, "config.h") or die "could not read config.h";
while(<HEADER>)
{
    my $def;
    if(/^\s*#define ([A-Z\d_]+)/ || /^\/\* #undef ([A-Z\d_]+)/)
    {
	$def = $1;
	next if($def =~ /^_/);
	$defs{$def} = 1;
    }
}
close HEADER;

# get other #defines in header files.
open(FILES, "find . -name \"*.h\" -print |") or die "could not find";
while(<FILES>)
{
    chomp;
    my $file = $_;
    next if($file =~ /config\.h$/);

    open(HEADER, $file) or die "could not open $file";
    while(<HEADER>)
    {
	$defs{$1} = 1 if(/^\s*#define\s+([A-Z\d_]+)/);
    }
    close HEADER;
}
close FILES;

# return 1 we don't know about this #ifdef.  set def to 1, to flag
# that the def was observed.
sub print_def($$)
{
    my ($state, $def) = @_;
    if(defined($defs{$def}))
    {
	$defs{$def} = 1;
	return 0;
    }
    return 0 if(defined($state->{$def}));
    return 1;
}

# process all source code files, looking for unknown #ifdefs
open(FILES, "find . -name \"*.[ch]\" -print |") or die "could not find";
while(<FILES>)
{
    chomp;
    my $file = $_;

    next if($file =~ /\/python\/scamper\.c$/);

    my %state;
    open(FILE, $file) or die "could not open $file";
    while(<FILE>)
    {
	chomp;
	if(/^\s*#define\s+([A-Z\d_]+)/)
	{
	    $state{$1} = 1;
	}
	elsif(/^\s*#ifdef\s+(.+?) / || /^\s*#ifdef\s+(.+)$/)
	{
	    print "$1 $file\n" if(print_def(\%state, $1));
	}
	else
	{
	    my @bits = split(/\s+/);
	    foreach my $bit (@bits)
	    {
		if($bit =~ /defined\((.+?)\)/)
		{
		    print "$1 $file\n" if(print_def(\%state, $1));
		}
	    }
	}
    }
    close FILE;
}
close FILES;

# print out defs that are stale.
foreach my $def (keys %defs)
{
    print "$def unused\n" if($defs{$def} == 0);
}

exit 0;
